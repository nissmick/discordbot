generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:../bot.db"
}

model User {
    id                         BigInt                 @id @map("discord_id")
    discord_username           String                 @unique
    iconUrl                    String                 @default("https://discord.com/assets/5d6a5e9d7d77ac29116e.png") @map("icon_url")
    emoji_default_server       String                 @default("misskey.io")
    isBot                      Boolean
    prompts                    Prompts[]
    loginBonus                 LoginBonus?
    collaboratedMessage        CollaborativeMessage[] @relation("collaborator")
    createdCollaboratedMessage CollaborativeMessage[]
    dAuth                      DiscordAuth?
    refreshTokens              RefreshToken[]

    @@index([discord_username])
}

model RefreshToken {
    expireAt DateTime
    token    String   @id @default(uuid())
    userId   BigInt
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiscordAuth {
    id           Int    @id @default(autoincrement())
    userId       BigInt @unique
    user         User   @relation(fields: [userId], references: [id])
    accessToken  String
    refreshToken String
    expiresIn    Int
}

model LoginBonus {
    id                    Int      @id @default(autoincrement())
    count                 Int      @default(0)
    Dates                 String   @default("")
    LastLogin             DateTime @default(dbgenerated("0"))
    consecutive_count     Int      @default(0)
    max_consecutive_count Int      @default(0)
    user                  User     @relation(fields: [userId], references: [id])
    userId                BigInt   @unique
}

model Prompts {
    id       Int      @id @default(autoincrement())
    authorId BigInt
    content  Prompt[]
    author   User     @relation(fields: [authorId], references: [id])
}

model Prompt {
    id        Int     @id @default(autoincrement())
    promptsId Int
    /// userか、botか
    isUser    Boolean
    content   String
    Prompts   Prompts @relation(fields: [promptsId], references: [id])
}

model CollaborativeMessage {
    id           Int                                      @id @default(autoincrement())
    content      String
    messageId    String
    channelId    String
    guildId      String
    editable     CollaborativeMessageEditablePermission[]
    collaborator User[]                                   @relation("collaborator")
    author       User                                     @relation(fields: [authorUserId], references: [id])
    authorUserId BigInt
}

model CollaborativeMessageEditablePermission {
    id                     Int                  @id @default(autoincrement())
    collaborativeMessageId Int
    isRole                 Boolean
    permitted              String
    CollaborativeMessage   CollaborativeMessage @relation(fields: [collaborativeMessageId], references: [id], onDelete: Cascade)
}
